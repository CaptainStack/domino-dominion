{"version":3,"sources":["events.js","components/Tile.jsx","components/Board.jsx","components/App.jsx","serviceWorker.js","initial_state.js","actions.js","index.js","reducer.js"],"names":["newGameButtonClicked","event","store","dispatch","type","Tile","_ref","tile","occupied","possible","impossible","legal","react_default","a","createElement","className","key","id","style","borderColor","content","Board","board","tiles","map","Tile_Tile","occupied_tiles","includes","possible_tiles","gridTemplateColumns","concat","dimensions","columns","gridTemplateRows","rows","App","state","title","Board_Board","onMouseDown","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","INITIAL_STATE","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","this","Symbol","iterator","next","done","value","push","err","return","legal_tiles","lowest_row_index","highest_row_index","lowest_column_index","highest_column_index","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","row","column","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","Math","abs","impossible_tiles","TileData","status","initialize_board","floor","__webpack_require__","d","__webpack_exports__","src_render","createStore","arguments","length","render","ReactDOM","components_App","getState","document","getElementById","subscribe","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"0PAEaA,eAAuB,SAAAC,GAClCC,EAAMC,SAAS,CAAEC,KAAM,uBCAZC,eAAO,SAAAC,GAAmD,IAAjDC,EAAiDD,EAAjDC,KAAMC,EAA2CF,EAA3CE,SAAsBC,GAAqBH,EAAjCI,WAAiCJ,EAArBG,UAAqBH,EAAXK,MAU1D,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,IAAMT,EAAKU,GAC5BC,MAAO,CAAEC,YAVVX,EACK,QACEC,EACF,WAEA,SAMLF,EAAKa,QAAU,IAAM,QCZhBC,EAAQ,SAAAf,GAAa,IAAXgB,EAAWhB,EAAXgB,MACjBC,EAAQD,EAAMC,MAAMC,IAAI,SAAAjB,GAAI,OAC9BK,EAAAC,EAAAC,cAACW,EAAD,CAAMlB,KAASA,EACTC,SAAWc,EAAMI,iBAAiBC,SAASpB,GAC3CE,SAAWa,EAAMM,iBAAiBD,SAASpB,OAEnD,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQG,MAAO,CAC5BW,oBAAmB,UAAAC,OAAaR,EAAMS,WAAWC,QAA9B,WACnBC,iBAAgB,UAAAH,OAAaR,EAAMS,WAAWG,KAA9B,aAEdX,ICMOY,EAhBI,SAAA7B,GAAa,IAAX8B,EAAW9B,EAAX8B,MACnB,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,UACIsB,EAAMC,OAEVzB,EAAAC,EAAAC,cAACwB,EAAD,CAAOhB,MAAOc,EAAMd,QACpBV,EAAAC,EAAAC,cAAA,UAAQyB,YAAavC,GAArB,UCDFwC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBnB,QACfa,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,gHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,UAO5BU,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,gBCpDpDC,EACb,CACE5B,MAAO,kBACPf,MAAO,CACLS,WAAY,CAAEG,KAAM,EAAGF,QAAS,GAChCT,MAAO,GACPG,eAhDF,WACE,IAAIA,EAAiB,GADZwC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAET,QAAAC,EAAAC,EAAiBC,KAAKjD,MAAtBkD,OAAAC,cAAAR,GAAAI,EAAAC,EAAAI,QAAAC,MAAAV,GAAA,EAA6B,KAApB3D,EAAoB+D,EAAAO,MACP,MAAhBtE,EAAKa,SACPM,EAAeoD,KAAKvE,IAJf,MAAAwE,GAAAZ,GAAA,EAAAC,EAAAW,EAAA,YAAAb,GAAA,MAAAK,EAAAS,QAAAT,EAAAS,SAAA,WAAAb,EAAA,MAAAC,GAOT,OAAO1C,GA0CPuD,YAAa,GACbrD,eAvCF,WACE,IAAIsD,EAAmB,IACnBC,GAAqB,IACrBC,EAAsB,IACtBC,GAAwB,IAJnBC,GAAA,EAAAC,GAAA,EAAAC,OAAAnB,EAAA,IAMT,QAAAoB,EAAAC,EAAiBlB,KAAK9C,iBAAtB+C,OAAAC,cAAAY,GAAAG,EAAAC,EAAAf,QAAAC,MAAAU,GAAA,EAAwC,KAA/B/E,EAA+BkF,EAAAZ,MAClCtE,EAAKoF,IAAMT,IACbA,EAAmB3E,EAAKoF,KAEtBpF,EAAKoF,IAAMR,IACbA,EAAoB5E,EAAKoF,KAEvBpF,EAAKqF,OAASR,IAChBA,EAAsB7E,EAAKqF,QAEzBrF,EAAKqF,OAASP,IAChBA,EAAuB9E,EAAKqF,SAjBvB,MAAAb,GAAAQ,GAAA,EAAAC,EAAAT,EAAA,YAAAO,GAAA,MAAAI,EAAAV,QAAAU,EAAAV,SAAA,WAAAO,EAAA,MAAAC,GAqBT,IAAI5D,EAAiB,GArBZiE,GAAA,EAAAC,GAAA,EAAAC,OAAA1B,EAAA,IAsBT,QAAA2B,EAAAC,EAAiBzB,KAAKjD,MAAtBkD,OAAAC,cAAAmB,GAAAG,EAAAC,EAAAtB,QAAAC,MAAAiB,GAAA,EAA6B,KAApBtF,EAAoByF,EAAAnB,MACtBqB,KAAKC,IAAI5F,EAAKoF,IAAMT,GAAoB,GAAOgB,KAAKC,IAAI5F,EAAKoF,IAAMR,GAAqB,GACxFe,KAAKC,IAAI5F,EAAKqF,OAASR,GAAuB,GAAOc,KAAKC,IAAI5F,EAAKqF,OAASP,GAAwB,GACvGzD,EAAekD,KAAKvE,IAzBf,MAAAwE,GAAAe,GAAA,EAAAC,EAAAhB,EAAA,YAAAc,GAAA,MAAAI,EAAAjB,QAAAiB,EAAAjB,SAAA,WAAAc,EAAA,MAAAC,GA4BT,OAAOnE,GAYPwE,iBAAkB,KCrDlBC,EAAW,SAACpF,EAAI0E,EAAKC,EAAQxE,EAASkF,GAA3B,MAAuC,CAAErF,GAAIA,EAAI0E,IAAKA,EAAKC,OAAQA,EAAQxE,QAASA,IAEtFmF,EAAmB,SAACnE,GAI/B,IAHA,IAAId,EAAQc,EAAMd,MACdL,EAAK,EAEA0E,EAAM,EAAGA,EAAMvD,EAAMd,MAAMS,WAAWG,KAAMyD,IACnD,IAAK,IAAIC,EAAS,EAAGA,EAASxD,EAAMd,MAAMS,WAAWC,QAAS4D,IACxDD,IAAQO,KAAKM,MAAMpE,EAAMd,MAAMS,WAAWG,KAAO,IAAM0D,IAAWM,KAAKM,MAAMpE,EAAMd,MAAMS,WAAWC,QAAU,GAChHV,EAAMC,MAAMuD,KAAKuB,EAASpF,EAAI0E,EAAKC,EAAQ,WAE3CtE,EAAMC,MAAMuD,KAAKuB,EAASpF,EAAI0E,EAAKC,EAAQ,OAE7C3E,IAKJ,OADAmB,EAAMd,MAAQA,EACPc,GClBTqE,EAAAC,EAAAC,EAAA,0BAAAzG,IAAAuG,EAAAC,EAAAC,EAAA,2BAAAC,IAQO,IAAM1G,EAAQ2G,YCLN,WAAgD,IAA/BzE,EAA+B0E,UAAAC,OAAA,QAAA1C,IAAAyC,UAAA,GAAAA,UAAA,GAAvB7C,EACtC,QAD6D6C,UAAAC,OAAA,EAAAD,UAAA,QAAAzC,GAC9CjE,MACb,IAAK,mBACH,OAAOmG,EAAiBnE,GAC1B,QACE,OAAOA,KDCA4E,EAAS,kBAAMC,IAASD,OAAOpG,EAAAC,EAAAC,cAACoG,EAAD,CAAK9E,MAAOlC,EAAMiH,aAAgBC,SAASC,eAAe,UAEtGL,IACA9G,EAAMoH,UAAUN,GHUT,SAAkBhE,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsE,IAAIC,mBAAwB9E,OAAOC,SAAS8E,MACpDC,SAAWhF,OAAOC,SAAS+E,OAIvC,OAGFhF,OAAOiF,iBAAiB,OAAQ,WAC9B,IAAM5E,EAAK,GAAAjB,OAAM0F,mBAAN,sBAEPhF,GAgEV,SAAiCO,EAAOC,GAEtC4E,MAAM7E,GACHK,KAAK,SAAAyE,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASvB,QACO,MAAfwB,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChF,UAAUC,cAAcgF,MAAM9E,KAAK,SAAAC,GACjCA,EAAa8E,aAAa/E,KAAK,WAC7BV,OAAOC,SAASyF,aAKpBtF,EAAgBC,EAAOC,KAG1Be,MAAM,WACLJ,QAAQC,IACN,mEArFAyE,CAAwBtF,EAAOC,GAI/BC,UAAUC,cAAcgF,MAAM9E,KAAK,WACjCO,QAAQC,IACN,+GAMJd,EAAgBC,EAAOC,MGjC/BE","file":"static/js/main.fc5d4488.chunk.js","sourcesContent":["import { store } from './index';\r\n\r\nexport const newGameButtonClicked = event => {\r\n  store.dispatch({ type: 'INITIALIZE_BOARD' });\r\n}\r\n","import React from 'react';\nimport '../styles/Tile.css';\n\nexport const Tile = ({tile, occupied, impossible, possible, legal}) => {\n  let get_border_color = () => {\n    if (occupied) {\n      return \"black\";\n    } else if (possible) {\n      return \"lighgrey\";\n    } else {\n      return \"grey\";\n    }\n  }\n  return (\n    <div className=\"Tile\" key={ tile.id }\n         style={{ borderColor: get_border_color()}}> \n      { tile.content ? \"c\" : null }\n    </div>\n  );\n}\n\nexport default Tile;\n","import React from 'react';\nimport '../styles/Board.css';\nimport { Tile } from './Tile';\n\nexport const Board = ({board}) => {\n  let tiles = board.tiles.map(tile => \n    <Tile tile = { tile } \n          occupied={ board.occupied_tiles().includes(tile)}\n          possible={ board.possible_tiles().includes(tile)}/>);\n\n  return (\n    <div className=\"Board\" style={{\n      gridTemplateColumns: `repeat(${ board.dimensions.columns }, 40px)`,\n      gridTemplateRows: `repeat(${ board.dimensions.rows }, 40px)`,\n    }}>\n      { tiles }\n    </div>\n  );\n}\n\nexport default Board;\n","import React from 'react';\nimport '../styles/App.css';\nimport { newGameButtonClicked } from '../events';\nimport { Board } from './Board';\n\nexport const App = ({state}) => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          { state.title }\n        </h1>\n        <Board board={state.board}/>\n        <button onMouseDown={newGameButtonClicked}>\n          5x5\n        </button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nlet occupied_tiles =\r\n  function() {\r\n    let occupied_tiles = [];\r\n    for (let tile of this.tiles) {\r\n      if (tile.content != null) {\r\n        occupied_tiles.push(tile);\r\n      }\r\n    }\r\n    return occupied_tiles;\r\n  }\r\n\r\nlet possible_tiles =\r\n  function() {\r\n    let lowest_row_index = 100;\r\n    let highest_row_index = -100;\r\n    let lowest_column_index = 100;\r\n    let highest_column_index = -100;\r\n\r\n    for (let tile of this.occupied_tiles()) {\r\n      if (tile.row < lowest_row_index) {\r\n        lowest_row_index = tile.row;\r\n      }\r\n      if (tile.row > highest_row_index) {\r\n        highest_row_index = tile.row;\r\n      }\r\n      if (tile.column < lowest_column_index) {\r\n        lowest_column_index = tile.column;\r\n      }\r\n      if (tile.column > highest_column_index) {\r\n        highest_column_index = tile.column;\r\n      }\r\n    }\r\n\r\n    let possible_tiles = [];\r\n    for (let tile of this.tiles) {\r\n      if ((Math.abs(tile.row - lowest_row_index) < 5) && (Math.abs(tile.row - highest_row_index) < 5) &&\r\n          (Math.abs(tile.column - lowest_column_index) < 5) && (Math.abs(tile.column - highest_column_index) < 5)) {\r\n        possible_tiles.push(tile);\r\n      }\r\n    }\r\n    return possible_tiles;\r\n  }\r\n\r\nexport const INITIAL_STATE =\r\n{\r\n  title: \"Domino Dominion\",\r\n  board: { \r\n    dimensions: { rows: 9, columns: 9 }, \r\n    tiles: [],\r\n    occupied_tiles: occupied_tiles,\r\n    legal_tiles: [],\r\n    possible_tiles: possible_tiles,\r\n    impossible_tiles: [],\r\n  }\r\n}\r\n","let TileData = (id, row, column, content, status) => ({ id: id, row: row, column: column, content: content });\n\nexport const initialize_board = (state) => {\n  let board = state.board;\n  let id = 0;\n\n  for (let row = 0; row < state.board.dimensions.rows; row++) {\n    for (let column = 0; column < state.board.dimensions.columns; column++) {\n      if (row === Math.floor(state.board.dimensions.rows / 2) && column === Math.floor(state.board.dimensions.columns / 2)) {\n        board.tiles.push(TileData(id, row, column, \"Castle\"));\n      } else {\n        board.tiles.push(TileData(id, row, column, null));\n      }\n      id++;\n    }\n  }\n\n  state.board = board;\n  return state;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport reducer from './reducer';\n\nexport const store = createStore(reducer);\nexport const render = () => ReactDOM.render(<App state={store.getState()} />, document.getElementById('root'));\n\nrender();\nstore.subscribe(render);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n","import { INITIAL_STATE } from './initial_state';\r\nimport { initialize_board } from './actions';\r\n\r\nexport default function reducer(state = INITIAL_STATE, action) {\r\n  switch (action.type) {\r\n    case 'INITIALIZE_BOARD':\r\n      return initialize_board(state);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"],"sourceRoot":""}