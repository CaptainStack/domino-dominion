{"version":3,"sources":["events.js","components/Tile.jsx","components/Board.jsx","components/App.jsx","serviceWorker.js","initial_state.js","actions.js","index.js","reducer.js"],"names":["newGameButtonClicked","event","store","dispatch","type","Tile","_ref","tile","react_default","a","createElement","className","key","id","Board","board","tiles","map","Tile_Tile","style","gridTemplateColumns","concat","dimensions","columns","gridTemplateRows","rows","App","state","title","Board_Board","onMouseDown","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","INITIAL_STATE","TileData","row","column","content","status","initialize_board","push","__webpack_require__","d","__webpack_exports__","src_render","createStore","arguments","length","undefined","render","ReactDOM","components_App","getState","document","getElementById","subscribe","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.26d6c316.chunk.js","sourcesContent":["import { store } from './index';\r\n\r\nexport const newGameButtonClicked = event => {\r\n  store.dispatch({ type: 'INITIALIZE_BOARD' });\r\n}\r\n","import React from 'react';\nimport '../styles/Tile.css';\n\nexport const Tile = ({tile}) => {\n  return (\n    <div className=\"Tile\" key={ tile.id }> \n      { tile.id } \n    </div>\n  );\n}\n\nexport default Tile;\n","import React from 'react';\nimport '../styles/Board.css';\nimport { Tile } from './Tile';\n\nexport const Board = ({board}) => {\n  let tiles = board.tiles.map(tile => <Tile tile = { tile} />);\n\n  return (\n    <div className=\"Board\" style={{\n      gridTemplateColumns: `repeat(${ board.dimensions.columns }, 40px)`,\n      gridTemplateRows: `repeat(${ board.dimensions.rows }, 40px)`,\n    }}>\n      { tiles }\n    </div>\n  );\n}\n\nexport default Board;\n","import React from 'react';\nimport '../styles/App.css';\nimport { newGameButtonClicked } from '../events';\nimport { Board } from './Board';\n\nexport const App = ({state}) => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          { state.title }\n        </h1>\n        <Board board={state.board}/>\n        <button onMouseDown={newGameButtonClicked}>\n          5x5\n        </button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nexport const INITIAL_STATE =\r\n{\r\n  title: \"Domino Dominion\",\r\n  board: { dimensions: { rows: 9, columns: 9 }, tiles: [] }\r\n}\r\n","let TileData = (id, row, column, content, status) => ({ id: id, row: row, column: column, content: content, status: status })\n\nexport const initialize_board = (state) => {\n  let board = state.board;\n  let id = 0;\n  for (let row = 0; row < state.board.dimensions.rows; row++) {\n    for (let column = 0; column < state.board.dimensions.columns; column++) {\n      board.tiles.push(TileData(id, row, column, null, \"potential\"));\n      id++;\n    }\n  }\n  state.board = board;\n  return state;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport reducer from './reducer';\n\nexport const store = createStore(reducer);\nexport const render = () => ReactDOM.render(<App state={store.getState()} />, document.getElementById('root'));\n\nrender();\nstore.subscribe(render);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n","import { INITIAL_STATE } from './initial_state';\r\nimport { initialize_board } from './actions';\r\n\r\nexport default function reducer(state = INITIAL_STATE, action) {\r\n  switch (action.type) {\r\n    case 'INITIALIZE_BOARD':\r\n      return initialize_board(state);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"],"sourceRoot":""}