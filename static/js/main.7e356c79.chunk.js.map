{"version":3,"sources":["events.js","initial_state.js","components/Tile.jsx","components/Board.jsx","components/App.jsx","serviceWorker.js","actions.js","index.js","reducer.js"],"names":["newGameButtonClicked","event","store","dispatch","type","TERRAIN","INITIAL_STATE","title","board","dimensions","rows","columns","tiles","occupied_tiles","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","this","Symbol","iterator","next","done","tile","value","content","push","err","return","legal_tiles","possible_tiles","lowest_row_index","highest_row_index","lowest_column_index","highest_column_index","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","row","column","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","Math","abs","impossible_tiles","Tile","_ref","clicked_tile","occupied","possible","impossible","get_background_color","legal","react_default","a","createElement","className","key","id","onMouseDown","style","borderColor","backgroundColor","Board","map","Tile_Tile","includes","gridTemplateColumns","concat","gridTemplateRows","App","state","Board_Board","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","TileData","status","initialize_board","floor","advance_content","__webpack_require__","d","__webpack_exports__","src_render","createStore","arguments","length","action","render","ReactDOM","components_App","getState","document","getElementById","subscribe","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7e356c79.chunk.js","sourcesContent":["import { store } from './index';\n\nexport const newGameButtonClicked = event => {\n  store.dispatch({ type: 'INITIALIZE_BOARD' });\n}\n\nexport const tileClicked = clicked_tile => event => {\n  store.dispatch({ type: 'ADVANCE_CONTENT', tile: clicked_tile });\n}\n","\nexport const TERRAIN = {\n  castle: 0,\n  empty: 1,\n  wheat: 2,\n  forest: 3,\n  lake: 4,\n  meadow: 5,\n  swamp: 6,\n  mine: 7,\n}\n\nlet occupied_tiles =\n  function() {\n    let occupied_tiles = [];\n    for (let tile of this.tiles) {\n      if (tile.content !== TERRAIN.empty) {\n        occupied_tiles.push(tile);\n      }\n    }\n    return occupied_tiles;\n  }\n\nlet possible_tiles =\n  function() {\n    let lowest_row_index = 100;\n    let highest_row_index = -100;\n    let lowest_column_index = 100;\n    let highest_column_index = -100;\n\n    for (let tile of this.occupied_tiles()) {\n      if (tile.row < lowest_row_index) {\n        lowest_row_index = tile.row;\n      }\n      if (tile.row > highest_row_index) {\n        highest_row_index = tile.row;\n      }\n      if (tile.column < lowest_column_index) {\n        lowest_column_index = tile.column;\n      }\n      if (tile.column > highest_column_index) {\n        highest_column_index = tile.column;\n      }\n    }\n\n    let possible_tiles = [];\n    for (let tile of this.tiles) {\n      if ((Math.abs(tile.row - lowest_row_index) < 5) && (Math.abs(tile.row - highest_row_index) < 5) &&\n          (Math.abs(tile.column - lowest_column_index) < 5) && (Math.abs(tile.column - highest_column_index) < 5)) {\n        possible_tiles.push(tile);\n      }\n    }\n    return possible_tiles;\n  }\n\n\n\nexport const INITIAL_STATE =\n{\n  title: \"Domino Dominion\",\n  board: {\n    dimensions: { rows: 9, columns: 9 },\n    tiles: [],\n    occupied_tiles: occupied_tiles,\n    legal_tiles: [],\n    possible_tiles: possible_tiles,\n    impossible_tiles: [],\n  }\n}\n","import React from 'react';\nimport '../styles/Tile.css';\nimport { TERRAIN } from '../initial_state';\nimport { tileClicked } from '../events';\n\nexport const Tile = ({tile, occupied, impossible, possible, legal}) => {\n  let get_border_color = () => {\n    if (occupied) {\n      return get_background_color();\n    } else if (possible) {\n      return \"#d3d3d3\";\n    } else {\n      return \"white\";\n    }\n  }\n\n  let get_background_color = () => {\n    switch(tile.content) {\n      case TERRAIN.empty:\n        return \"white\";\n      case TERRAIN.castle:\n        return \"lightpink\";\n      case TERRAIN.wheat:\n        return \"#E7B928\";\n      case TERRAIN.forest:\n        return \"#314919\";\n      case TERRAIN.lake:\n        return \"#278DD5\";\n      case TERRAIN.meadow:\n        return \"#8E9C2D\";\n      case TERRAIN.swamp:\n        return \"#B19A7A\";\n      case TERRAIN.mine:\n        return \"#3D2B27\";\n      default:\n        return \"transparent\";\n    }\n  }\n  return (\n    <div className=\"Tile\" key={ tile.id }\n         onMouseDown={ tileClicked(tile) }\n         style={{ borderColor: get_border_color(),\n                  backgroundColor: get_background_color()\n         }}> \n\n    </div>\n  );\n}\n\nexport default Tile;\n","import React from 'react';\nimport '../styles/Board.css';\nimport { Tile } from './Tile';\n\nexport const Board = ({board}) => {\n  let tiles = board.tiles.map(tile => \n    <Tile tile = { tile } \n          occupied={ board.occupied_tiles().includes(tile)}\n          possible={ board.possible_tiles().includes(tile)}/>);\n\n  return (\n    <div className=\"Board\" style={{\n      gridTemplateColumns: `repeat(${ board.dimensions.columns }, 40px)`,\n      gridTemplateRows: `repeat(${ board.dimensions.rows }, 40px)`,\n    }}>\n      { tiles }\n    </div>\n  );\n}\n\nexport default Board;\n","import React from 'react';\nimport '../styles/App.css';\nimport { newGameButtonClicked } from '../events';\nimport { Board } from './Board';\n\nexport const App = ({state}) => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          { state.title }\n        </h1>\n        <Board board={state.board}/>\n        <button onMouseDown={newGameButtonClicked}>\n          5x5\n        </button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { TERRAIN } from './initial_state';\n\nlet TileData = (id, row, column, content, status) => ({ id: id, row: row, column: column, content: content });\n\nexport const initialize_board = (state) => {\n  let board = state.board;\n  board.tiles = [];\n  let id = 0;\n\n  for (let row = 0; row < state.board.dimensions.rows; row++) {\n    for (let column = 0; column < state.board.dimensions.columns; column++) {\n      if (row === Math.floor(state.board.dimensions.rows / 2) && column === Math.floor(state.board.dimensions.columns / 2)) {\n        board.tiles.push(TileData(id, row, column, TERRAIN.castle));\n      } else {\n        board.tiles.push(TileData(id, row, column, TERRAIN.empty));\n      }\n      id++;\n    }\n  }\n\n  state.board = board;\n  return state;\n}\n\nexport const advance_content = (state, clicked_tile) => {\n  if (clicked_tile.content !== TERRAIN.castle && state.board.possible_tiles().includes(clicked_tile)) {\n    if (clicked_tile.content < 7) {\n      clicked_tile.content += 1;\n    } else {\n      clicked_tile.content = TERRAIN.empty; \n    }\n  }\n  return state;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport reducer from './reducer';\n\nexport const store = createStore(reducer);\nexport const render = () => ReactDOM.render(<App state={store.getState()} />, document.getElementById('root'));\n\nrender();\nstore.subscribe(render);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n","import { INITIAL_STATE } from './initial_state';\nimport { initialize_board, advance_content } from './actions';\n\nexport default function reducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case 'INITIALIZE_BOARD':\n      return initialize_board(state);\n    case 'ADVANCE_CONTENT':\n      return advance_content(state, action.tile);\n    default:\n      return state;\n  }\n}\n"],"sourceRoot":""}